# load typekits
import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")

# load transport plugins
#import("rtt_rsbcomm")

# import component libs
import("rtt_gazebo_embedded") 
import("rtt-gazebo-robot-sim") 
import("rtt-core-extensions") 

require("os")

#var string model_name = "model://iit-coman-no-forearms";
#var string path_model_urdf = os.getenv("GAZEBO_MODEL_PATH")+"/iit-coman-no-forearms/model.urdf";
#var string path_model_srdf = os.getenv("GAZEBO_MODEL_PATH")+"/iit-coman-no-forearms/coman_no_forearms.srdf";
#var int DOFsize = 4;

var string model_name = "model://kuka-lwr-4plus";
var string path_model_urdf = os.getenv("GAZEBO_MODEL_PATH")+"/kuka-lwr-4plus/model.urdf";
var string path_model_srdf = os.getenv("GAZEBO_MODEL_PATH")+"/kuka-lwr-4plus/model.srdf";
var int DOFsize = 7;

# instantiate components

# gazebo
loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.argv = strings("--verbose") 
gazebo.add_plugin("libRTTGazeboClockPlugin.so")

# robot sim
loadComponent("robot_gazebo","cogimon::robotSim")
setActivity("robot_gazebo",0,11,ORO_SCHED_OTHER)

# load simulation related parts (i.e. models)

# actually start the gzserver
gazebo.configure()
# start the simulation process
gazebo.start()
# disable the dynamics
gazebo.toggleDynamicsSimulation(false)
# load model
gazebo.spawn_model("robotmodel", model_name, 10)


# configure components

# configure robot sim
# attach previously loaded model
robot_gazebo.getModel("robotmodel")

#load kinematic chains
robot_gazebo.loadURDFAndSRDF(path_model_urdf, path_model_srdf)

# execute the simulation bridge
robot_gazebo.configure()

# configure kin. chain view
#robot_gazebo.setControlMode("left_arm", "JointPositionCtrl")
robot_gazebo.setControlMode("full_arm", "JointPositionCtrl")

# enable physics simulation again
gazebo.toggleDynamicsSimulation(true)

import("RttExamples1")
# you can do displayComponentTypes

loadComponent("myPositionController", "SimpleExample")
setActivity("myPositionController", 0.05, 50, ORO_SCHED_OTHER)

myPositionController.setDOFsize(DOFsize)

var ConnPolicy cp
#connect("myPositionController.out_angles_port", "robot_gazebo.left_arm_JointPositionCtrl", cp)
connect("myPositionController.out_angles_port", "robot_gazebo.full_arm_JointPositionCtrl", cp)

myPositionController.configure()
myPositionController.start()

#generate graph file
import("rtt_dot_service")           
loadService("this", "dot")
dot.generate 


